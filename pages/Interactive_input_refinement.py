"""
SmAuto Assistant - Interactive Input Refinement Module

This module creates a Streamlit-based web application for interacting with the SmAuto Assistant
in the Interactive Input Refinement scenario. The SmAuto Assistant guides users through a process
of iterative model refinement based on their input. By analyzing user input and requesting 
clarifications, it helps users build well-defined models, ensuring completeness and accuracy
before generating the final SmAuto model.

Key Functionalities:
- Initialize and manage conversation state for dynamic input refinement.
- Display chat history between the user and the SmAuto Assistant.
- Handle user input, provide feedback, and guide users in refining their model step by step.

"""

import streamlit as st
import llm_to_smauto


def initialize_session_state():
    """
    Initializes the session state for the Interactive Input Refinement scenario.

    This function ensures that the following session state variables are initialized:
    - 'conversation_history': A list to store the conversation history between the user and
      the assistant.
    - 'display_history': A list of tuples that track the messages exchanged between the user
      and the assistant, to be displayed in the chat interface.
    - 'qna_history': A list used to track the questions and answers between the assistant and
      the user during the interactive input refinement process.

    If these variables are not already present in the session state, they are initialized as
    empty lists.
    """
    if "conversation_history" not in st.session_state:
        st.session_state.conversation_history = []
    if "display_history" not in st.session_state:
        st.session_state.display_history = []
    if "qna_history" not in st.session_state:
        st.session_state.qna_history = []


def handle_user_input(user_input):
    """
    Processes the user input during the Interactive Input Refinement scenario.

    This function is responsible for handling and responding to the user's input.
    It appends the user's message to the display history, invokes the SmAuto assistant
    to analyze the input, and generates feedback or follow-up questions to guide the
    user through the refinement process.

    Depending on whether the conversation has just started or is ongoing, it either:
    1. Analyzes the initial input and provides feedback on what needs refinement.
    2. Continues the interactive Q&A process to request additional details from the user.

    Parameters:
    - user_input (str): The user's input, entered through the chat interface, which
      will be analyzed and used to refine the model.

    Updates the session state with the refined conversation and Q&A history, and appends
    the responses generated by the assistant to the display history for visual feedback.
    """
    st.session_state.display_history.append(("User", user_input))
    try:
        if not st.session_state.qna_history:
            # Initial analysis of the user input
            with st.spinner("Analyzing your request..."):
                analyzed_utterance, st.session_state.conversation_history = (
                    llm_to_smauto.analyze_user_utterance(
                        user_input, st.session_state.conversation_history
                    )
                )
            st.session_state.qna_history = llm_to_smauto.qna_initialization(
                st.session_state.conversation_history
            )
            st.session_state.display_history.append(
                ("SmAuto Assistant", st.session_state.qna_history[-1][1])
            )
        else:
            # Continue the refinement with follow-up questions
            st.session_state.qna_history = llm_to_smauto.qna_follow_up(
                user_input,
                st.session_state.conversation_history,
                st.session_state.qna_history,
            )
            st.session_state.display_history.append(
                ("SmAuto Assistant", st.session_state.qna_history[-1][1])
            )
    except Exception as e:
        st.session_state.display_history.append(
            ("SmAuto Assistant", f"An error occurred: {str(e)}")
        )


def display_chat_history():
    """
    Displays the chat history between the user and the SmAuto Assistant.

    This function iterates over the 'display_history' session state, which contains
    the messages exchanged between the user and the assistant. Depending on whether
    the message was sent by the user or the assistant, it formats and renders them
    in the chat interface.

    This provides a conversational view for users, allowing them to see their input
    and the assistant's responses in the form of a dialogue.
    """
    for sender, message in st.session_state.display_history:
        if sender == "User":
            with st.chat_message("user"):
                st.write(message)
        else:
            with st.chat_message("assistant"):
                st.write(message)


def main():
    """
    Main function to run the Interactive Input Refinement user interface in the SmAuto Assistant
    app.

    The function sets up the interface with a title, sidebar instructions, and an input field for
    users to enter their model specifications or queries. It also manages the session state,
    displays the chat history, and handles user input as part of the interactive refinement process.

    Workflow:
    1. Initializes the session state and conversation variables.
    2. Prompts the user to enter input for refining the model.
    3. Handles the input and guides the user through iterative Q&A to refine the model.
    4. Continuously displays the conversation and feedback for clarity and interaction.

    This serves as the primary entry point for the Streamlit-based SmAuto Assistant app.
    """
    st.title("SmAuto Assistant - Interactive Input Refinement")
    st.sidebar.header("How to use Interactive Input Refinement")
    st.sidebar.write(
        """
        1. Enter a model specification or question.
        2. Review the SmAuto Assistant's feedback or the generated model.
        3. Refine your input based on the feedback.
        4. Submit the refinement to improve the model further.
        5. Repeat the process until you achieve the desired model quality.
        """
    )

    initialize_session_state()

    # Input field for the user to interact with the assistant
    user_input = st.chat_input("Start refining your model here...")
    if user_input:
        handle_user_input(user_input)

    # Display the conversation history in the chat interface
    display_chat_history()


if __name__ == "__main__":
    main()
