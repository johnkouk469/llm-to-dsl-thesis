{
    "greet": "I want to create a dialogue scenario for greeting a user. The scenario will consist of a generic intent and the assistant will respond with \"Hello there!\".",
    "ask_weather": "I want to create a dialogue scenario for telling the weather forecast. The assistant will ask for the city the user wants to learn the forecast for and will call the API http://services.issel.ee.auth.gr/general_information/weather_openweather with city as a query parameter and will present the retrieved information to the user via a speak event. The retrieved information is located in the temp field of the response object. The response expression will be \"The weather forecast will be \" retrieved_temp \" for \" requested_city.",
    "ask_weather_ac": "I want to create a dialogue scenario for telling the weather forecast. The assistant will ask for the city the user wants to learn the forecast for and will call the API http://services.issel.ee.auth.gr/general_information/weather_openweather with city as a query parameter and will present the retrieved information to the user via a speak event. The retrieved information is located in the temp field of the response object. The response expression will be \"The weather forecast will be \" retrieved_temp \" for \" requested_city. Retrieving the weather forecast should only be allowed to paid users and blocked for the other users. Protect this action using an explicit access control Policy and retrieve user's idenity from user_id. User-role mappings should be explicitly defined, where username1 is a paid user and username2 is a non-paid user.",
    "book_appointment": "I want to create a dialogue scenario for a doctor appointment scheduling. The assistant should ask the user to provide the doctor name, date and time, and then use all these parameters to call the API. It is a post API is https://health.com/medical/book_appointment  that receives the three parameters as body params. Then, if successful it should respond to the user with \"Doctor {doctor_name} is waiting for you at {date}, {time}\".",
    "book_appointment_ac": "I want to create a dialogue scenario for a doctor appointment scheduling. The assistant should ask the user to provide the doctor name, date and time, and then use all these parameters to call the API. It is a post API is https://health.com/medical/book_appointment  that receives the three parameters as body params. Then, if successful it should respond to the user with \"Doctor {doctor_name} is waiting for you at {date}, {time}\". Additionally, paid plan users should be informed that their appointment is covered by the insurance, and free plan users must be encouraged to upgrade their plan if they want insurance to cover their appointment. However, unregistered users should not be allowed to book an appointment. The users idenity should be extracted from a slack connector with token: xoxb-4883692765252-4884029447172-rH1b8v6PMj22OaTsaIQrtpfH, channel: doctor_assistant and signing_secret: 123456798. User-role mappings should be retrieved from /home/Desktop/users_db.txt",    
    "remind_medicine": "Please write a dialogue for notifing a user for their medication of the day. The list is in https://health.com/profile/medication_list in response parameter medication. Create an intent with possible user utterances, call the api and state the message: \"Today you have to take\" {medication} .",
    "open_window": "I want an assistant interaction for opening a smart windown. There will be an access control system that uses user's ID, and if it belongs to the user_parent role it will fire an event to uri: `/window` with message `open` and say `Sure, I am opening it right now`. If not, it will be a user_child role (which is also the default role), then it will say `I am sorry, you are not authorized`. Include the username-role mappings from the /home/Desktop/ac_policies.txt file.",
    "user_profile": "Write an assistant interaction for registering a new user to our platform. We ask only for name and age and POST it to the https://platform.health.gr/user/regist API as query parameters. After that answer with 'Glad to meet you' and the name of the user.",
    "user_profile_ac": "Write an assistant interaction for registering a new user to our platform. We ask only for name and age and POST it to the https://platform.health.gr/user/regist API as query parameters. After that answer with 'Glad to meet you' and the name of the user. If the user's name has already been registered, omit the post request and reply only with 'It is nice seeing you again' and the name of the user. The registered names should be retrieved from /home/Desktop/registered_users_db.txt",
    "retrieve_steps": "Create a dialogue scenario for a user that wants to learn how many steps they have made in the current day. The steps are stored in the personal data registry in https://health.com/profile/steps under the 'steps' response object param. Retrieve it and say 'Today you have done {steps} steps so far.'",
    "take_notes": "We want to support a note taking functionality verbally. We have an api that gets a `note` body parameter and stores it internally in the user profile. The api is a post api in https://services.issel.auth.gr/profile/notes. Ask user for what they want to save, send it to the API and respond 'OK, noted!'",
    "buy_amazon": "Amazon buy assistant scenario, where user states a product (via an entity preferably) and the assistant calls the POST API: https://api.amazon.com/products/buy with body param `product`. Check the user's id if it is in parent or child role and if it a parent, do the process, send the product to the API and then say a successful response message. Otherwise, suggest them to ask their parents as they are not allowed to do that. the role username mappings are in the /home/Desktop/users.txt file.",
    "log_food": "Craft a meal logging interaction. When users want to store the meal they ate, ask them the exact dish and volume they consumed, store it and send it to https://services.issel.auth.gr/profile/meal POST api as body params with names dish and volume. Respond with `Thanks for letting me know!`.",
    "audiobook": "We want an audiobook assistant that users can use to listen to an audiobook whenever they greet the assistant and also change narrator's voice on demand. For now there are only two available audiobooks, Silmarilion by Tolkien and Dune by Frank Herbert, additionally there are only two available narrator voices, male and female. We distinguish the users into two roles, free (default) and paid. Free users are only given a sample of the audiobook, while paid users get the full audiobook. Additionally, free users cannot change narrator's voice and have to be encouranged to switch to a paid plan whenever they attempt to do so. To get the full/sample audiobook a GET request should be made at localhost:7777 and path full_book/sample_book respectively, with the name of the audiobook placed within the audiobook query parameter. To change narrator's voice, a PUT request at localhost:7777/change_narrator should be made, with the body parameter narrator containing the voice choice. User-role mappings should be retrieved from /home/Desktop/users.txt, while the identification of the users will be done via slack. The slack connector has the following parameters, token: xoxb-4883692765252-4884029447172-rH1b8v6PMj22OaTsaIQrtpfH, channel: audiobook_assistant and signing_secret: 123456798.",
    "smart_car": "Write an assistant for a smart car that can start the engine of the vehicle and play music on demand. Only the driver should be able to start the engine, while all the passengers should be able to turn the radio on. To start the engine the event at /engine should be set to on, while to play music the event /radio should be set to on. Please inform the passengers whenever an action is performed. The default role should be the passenger. The user-role mappings must be retrieved from /home/Desktop/passengers.txt and the users must be authenticated by their user_id."
}